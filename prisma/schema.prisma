generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  OWNER
  CLIENT
  DELIVERY
}

model User {
  id         String       @id @default(cuid())
  email      String       @unique
  password   String
  name       String?
  photoURL   String?
  code       VerifyEmail?
  role       ROLE         @default(CLIENT)
  IsVerified Boolean      @default(false)
  createdAt  DateTime?    @default(now())
  updatedAt  DateTime?    @default(now())
  deletedAt  DateTime?

  Restaurant Restaurant[]

  Order Order[] @relation("Customer")
  Rides Order[] @relation("Driver")
}

model VerifyEmail {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
  code      String    @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  deletedAt DateTime?
}

model Restaurant {
  id         String    @id @default(cuid())
  name       String
  coverImage String
  address    String
  owner      User      @relation(fields: [ownerId], references: [id])
  ownerId    String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  menu       Dish[]
  orders     Order[]
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())
  deletedAt  DateTime?

  @@unique([name, ownerId])
  @@index([name])
}

model Category {
  id         String       @id @default(cuid())
  name       String
  Slug       String       @unique
  coverImage String
  Restaurant Restaurant[]
  createdAt  DateTime?    @default(now())
  updatedAt  DateTime?    @default(now())
  deletedAt  DateTime?

  @@index([name])
}

model Dish {
  id           String        @id @default(cuid())
  name         String        @unique
  photo        String
  description  String?
  price        Int
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @default(now())
  deletedAt    DateTime?
  options      DishOptions[]
  Restaurant   Restaurant?   @relation(fields: [restaurantId], references: [id])
  restaurantId String?

  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  orderItems OrderItems[]
  @@index([name])
}

enum SpiceLevel {
  LOW
  MEDIUM
  HIGH
  KILL_ME
}

enum DishSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

model DishOptions {
  id           String     @id @default(cuid())
  name         String     @unique
  flavour      String[]
  size         DishSize   @default(MEDIUM)
  spiceLevel   SpiceLevel @default(MEDIUM)
  extraItems   String[]
  OtherChoices Json[]
  extraPrice   Int?
  createdAt    DateTime?  @default(now())
  updatedAt    DateTime?  @default(now())
  deletedAt    DateTime?
  Dish         Dish?      @relation(fields: [dishId], references: [id])
  dishId       String?
}

enum ORDER_STATUS {
  PENDING
  COOKING
  PICKED_UP
  DELIVERED
}

model Order {
  id           String       @id @default(cuid())
  total        Int
  status       ORDER_STATUS @default(PENDING)
  createdAt    DateTime?    @default(now())
  updatedAt    DateTime?    @default(now())
  deletedAt    DateTime?
  Restaurant   Restaurant?  @relation(fields: [restaurantId], references: [id])
  restaurantId String?
  Customer     User?        @relation(fields: [customerId], references: [id], name: "Customer")
  customerId   String?
  Driver       User?        @relation(fields: [driverId], references: [id], name: "Driver")
  driverId     String?
  dishes       Dish[]
}

model OrderItems {
  id               String    @id @default(cuid())
  orderItemOptions Json[]
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @default(now())
  deletedAt        DateTime?

  Dish   Dish?   @relation(fields: [dishId], references: [id])
  dishId String?
}
